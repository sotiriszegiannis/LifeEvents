@inject UsersRepository UsersRepository
<div>
    <div class="row">
        <MudForm>
            <MudRadioGroup T="string" @bind-Value="@SelectedOption">
                <MudRadio T="string" Value="@("Duration")" Color="Color.Primary">Duration</MudRadio>
                <MudRadio T="string" Value="@("StartAt")" Color="Color.Secondary">Start at</MudRadio>
                <MudRadio T="string" Value="@("Range")">Range</MudRadio>
            </MudRadioGroup>
        </MudForm>
    </div>
    <div class="row">
        <div class="col-12">
            @if (SelectedOption == "Duration")
            {
                <DurationPicker @bind-DurationInMinutes="DurationInMinutes" @ref="DurationPicker" />
            }
            else if (SelectedOption == "StartAt")
            {
                <MudTimePicker @ref="MudTimePicker" @bind-Time="StartTime" />
            }
            else if (SelectedOption == "Range")
            {
                <MudTextField T="DateTime?" Format="s" Label="From" InputType="InputType.DateTimeLocal" @bind-Value="From" />
                <MudTextField T="DateTime?" Format="s" Label="To" InputType="InputType.DateTimeLocal" @bind-Value="To" />
            }
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <MudChipSet T="int" Filter="true" SelectedValueChanged="SelectedFixedDurationChanged" @ref="FixedDurationsSet" CheckMark>
                @foreach (var item in FixedDurations)
                {
                    <MudChip T="int" Text="grey" Value="item.minutes">@item.label</MudChip>
                }
            </MudChipSet>
        </div>
    </div>
</div>


@code {
    WebApp.DateRange _DateRange { get; set; }
    [Parameter]
    public WebApp.DateRange DateRange { get; set; }
    [Parameter]
    public EventCallback<WebApp.DateRange> DateRangeChanged { get; set; }
    DurationPicker DurationPicker { get; set; }
    UserRDTO User { get; set; }
    int DurationInMinutes
    {
        get
        {
            if (GetEventDateRange().From.HasValue && GetEventDateRange().To.HasValue)
            {
                return GetEventDateRange().From.Value.GetTotalMinutes(GetEventDateRange().To.Value);                
            }
            else
                return 0;
        }
        set
        {
            if (User != null)
            {
                GetEventDateRange().To = DateTime.UtcNow.ToIanaTimeZone(User.TimeZone);
                GetEventDateRange().From = GetEventDateRange().To.Value.AddMinutes(-value);
                TriggerDateRangeChangedEvent();
            }
        }
    }
    TimeSpan? _StartTime { get; set; } = new TimeSpan(00, 00, 00);
    TimeSpan? StartTime
    {
        get
        {
            return _StartTime;
        }
        set
        {
            _StartTime = value;
            var nowAtUserTimeZone = DateTime.UtcNow.ToIanaTimeZone(User.TimeZone);
            if (nowAtUserTimeZone.TimeOfDay > _StartTime!.Value)
                GetEventDateRange().From = nowAtUserTimeZone.Date.Add(_StartTime.Value);
            else
                GetEventDateRange().From = nowAtUserTimeZone.Date.AddDays(-1).Add(_StartTime.Value);
            GetEventDateRange().To = DateTime.UtcNow.ToIanaTimeZone(User.TimeZone);
            TriggerDateRangeChangedEvent();
        }
    }
    DateTime? _From { get; set; }
    DateTime? From
    {
        get
        {
            return GetEventDateRange().From;
        }
        set
        {
            GetEventDateRange().From = value;
            TriggerDateRangeChangedEvent();
        }
    }
    DateTime? _To { get; set; }
    DateTime? To
    {
        get
        {
            return GetEventDateRange().To;
        }
        set
        {
            GetEventDateRange().To = value;
            TriggerDateRangeChangedEvent();
        }
    }
    MudTimePicker MudTimePicker { get; set; }
    MudChipSet<int> FixedDurationsSet { get; set; }
    MudChip<int> SelectedFixedDuration { get; set; }
    void SelectedFixedDurationChanged(int mudChipValue)
    {
        GetEventDateRange().To = DateTime.UtcNow.ToIanaTimeZone(User.TimeZone);
        GetEventDateRange().From = GetEventDateRange().To.Value.AddMinutes(-(int)mudChipValue);
        DurationPicker.SetDuration((int)mudChipValue);
        //TriggerDateRangeChangedEvent();
    }
    List<(int minutes, string label)>
        FixedDurations = new List<(int minutes, string label)>
            () {
            (5,"5'"), (30,"30'"), (60,"1 hour"), (240,"4 hours"), (420,"7 hours") };
    protected async override Task OnInitializedAsync()
    {
        User = await UsersRepository.Get();
        await base.OnInitializedAsync();
    }
    public override Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<WebApp.DateRange>(nameof(DateRange), out var dateRange))
        {
            DateRange = dateRange;
            var durationInMinutes = 0;
            if (dateRange != null && dateRange.From.HasValue && dateRange.To.HasValue)
            {                
                durationInMinutes = dateRange.To.Value.GetTotalMinutes(dateRange.From.Value);
            }
            else
                durationInMinutes = 0;
            if (DurationInMinutes != durationInMinutes)
                DurationInMinutes = durationInMinutes;
        }
        return base.SetParametersAsync(parameters);
    }
    void TriggerDateRangeChangedEvent()
    {
        var dateRange = GetEventDateRange();
        DateRangeChanged.InvokeAsync(new WebApp.DateRange()
            {
                From = dateRange.From,
                To = dateRange.To
            });
    }
    string _SelectedOption { get; set; } = "Duration";
    string SelectedOption
    {
        get
        {
            return _SelectedOption;
        }
        set
        {
            SelectedFixedDuration = null;
            FixedDurationsSet.SelectedValue = 0;
            _SelectedOption = value;
            switch (_SelectedOption)
            {
                case "StartAt":
                    MudTimePicker?.OpenAsync();
                    break;
                case "Range":
                    var range = GetEventDateRange();
                    if (!range.From.HasValue)
                    {
                        range.From = DateTime.UtcNow.ToIanaTimeZone(User.TimeZone);
                        range.To = range.From;
                    }
                    break;
            }
        }
    }
    WebApp.DateRange GetEventDateRange()
    {
        if (_DateRange == null)
            _DateRange = new WebApp.DateRange();
        return _DateRange;
    }
}
