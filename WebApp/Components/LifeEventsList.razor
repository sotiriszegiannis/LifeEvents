@inject ISnackbar Snackbar
@inject UsersRepository UsersRepository
@inject LifeEventsRepository LifeEventsRepository
@inject CrossComponentCommunication CrossComponentCommunication
<div class="row d-flex justify-content-center">
    <div class="card">
        <div class="card-body">
            <div class="row">
                @*<div class="col-md-5 col-12">
                <input type="radio" class="btn-check" name="options" id="today" autocomplete="off"
                @onclick="()=>SelectedPeriodType=SelectedPeriodEnum.Today" checked>
                <label class="btn btn-secondary" for="today">Today</label>

                <input type="radio" class="btn-check" name="options" id="thisWeek" autocomplete="off"
                @onclick="()=>SelectedPeriodType=SelectedPeriodEnum.ThisWeek">
                <label class="btn btn-secondary" for="thisWeek">This week</label>

                <input type="radio" class="btn-check" name="options" id="thisMonth" autocomplete="off"
                @onclick="()=>SelectedPeriodType=SelectedPeriodEnum.ThisMonth">
                <label class="btn btn-secondary" for="thisMonth">This month</label>
                </div>*@
                @if (SelectedPeriodType == SelectedPeriodEnum.Today)
                {
                    <div class="col-md-3 col-12">
                        <MudIconButton Icon="@Icons.Material.Filled.ArrowCircleLeft" OnClick="()=>ChangeDate(true)"></MudIconButton>
                        <h3 class="cursor-pointer" style="display:inline" @onclick="()=>SelectedDateComponent.Open()">@DateRange?.From?.ToString("MMMM dd")</h3>
                        <div style="display:none">
                            <MudDatePicker @bind-Date="SelectedDate" @ref="SelectedDateComponent" />
                        </div>                        
                        @if (DateRange?.From?.DayOfYear < DateTime.UtcNow.DayOfYear)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.ArrowCircleRight" OnClick="()=>ChangeDate(false)"></MudIconButton>
                        }
                    </div>
                }
            </div>

        </div>
    </div>
</div>
<MudRadioGroup @bind-SelectedOption="@SelectedViewType">
    <MudRadio Option="@("Grouped")" Color="Color.Primary">Grouped</MudRadio>
    <MudRadio Option="@("Flat")" Color="Color.Secondary">Flat</MudRadio>
</MudRadioGroup>
@if (_SelectedViewType == "Grouped")
{
    <GroupedLifeEventsList DateRange="DateRange"></GroupedLifeEventsList>
}
else
{
    <FlatLifeEventsList DateRange="DateRange"></FlatLifeEventsList>
}

@code {
    MudDatePicker SelectedDateComponent { get; set; }
    DateTime? _SelectedDate{ get; set; }
    public DateTime? SelectedDate
    {
        get
        {
            return _SelectedDate;
        }
        set
        {
            _SelectedDate = value;
            ChangeDate(value.Value);
        }
    }
    UserRDTO User { get; set; }
    WebApp.DateRange DateRange { get; set; } = new WebApp.DateRange();
    SelectedPeriodEnum _SelectedPeriodType { get; set; } = SelectedPeriodEnum.Today;
    SelectedPeriodEnum SelectedPeriodType
    {
        get
        {
            return _SelectedPeriodType;
        }
        set
        {
            _SelectedPeriodType = value;
            if (User != null)
                switch (value)
                {
                    case SelectedPeriodEnum.Today:
                        DateRange.From = DateTime.UtcNow.GetStartOfDayDate();
                        DateRange.To = DateTime.UtcNow.ToIanaTimeZone(User.TimeZone);
                        break;
                    case SelectedPeriodEnum.ThisWeek:
                        DateRange.From = DateTime.UtcNow.GetFirstDayOfWeek();
                        DateRange.To = DateTime.UtcNow.ToIanaTimeZone(User.TimeZone);
                        break;
                    case SelectedPeriodEnum.ThisMonth:
                        DateRange.From = DateTime.UtcNow.GetFirstDayOfMonth();
                        DateRange.To = DateTime.UtcNow.ToIanaTimeZone(User.TimeZone);
                        break;
                }
        }
    }
    string _SelectedViewType { get; set; } = "Grouped";
    string SelectedViewType
    {
        get
        {
            return _SelectedViewType;
        }
        set
        {
            _SelectedViewType = value;
        }
    }
    protected async override Task OnInitializedAsync()
    {
        User = await UsersRepository.Get();
        SelectedPeriodType = SelectedPeriodEnum.Today;
        await base.OnInitializedAsync();
    }
    void ChangeDate(bool goBack)
    {
        int dayToGo = goBack ? -1 : 1;
        var from = DateRange.From?.AddDays(dayToGo);
        if (from.HasValue)
            ChangeDate(from.Value);
    }
    void ChangeDate(DateTime date)
    {
        DateRange.From = date.GetStartOfDayDate();
        DateRange.To = date.GetEndOfDayDate();
    }
    enum SelectedPeriodEnum
    {
        Today,
        ThisWeek,
        ThisMonth
    }
}
