@inject UsersRepository UsersRepository
@inject MoneyRepository MoneyRepository
<div>
    <div class="d-flex flex-row mb-3">
        @if (Income > 0)
        {
            <div class="p-2">
                <li class="list-inline-item me-3">
                    <div style="display:flex">
                        <MudIcon Icon="@Icons.Material.Filled.ArrowUpward" Color="Color.Success" />
                        <h5 class="mb-1">
                            € +@Income
                        </h5>
                    </div>
                </li>
            </div>
        }
        <div class="p-2">
            @if (Expenses > 0)
            {
                <li class="list-inline-item me-3">
                    <div style="display:flex">
                        <MudIcon Icon="@Icons.Material.Filled.ArrowDownward" Color="Color.Error" />
                        <h5 class="mb-1">
                            € -@Expenses
                        </h5>
                    </div>
                </li>
            }
        </div>        
    </div>
</div>

@code {
    [Parameter]
    public WebApp.DateRange DateRange { get; set; }
    protected async override Task OnInitializedAsync()
    {
        var User = await UsersRepository.Get();
        var from = DateTime.UtcNow.GetFirstDayOfMonth().ToIanaTimeZone(User.TimeZone);
        var to = DateTime.UtcNow.ToIanaTimeZone(User.TimeZone);
        var allTransactions = await MoneyRepository.GetAll(from, to, User);
        Income = (int)allTransactions.Where(x =>x.Type==Domain.MoneyTransactionTypeEnum.Income).Sum(x => x.Amount);
        Expenses = (int)allTransactions.Where(x => x.Type == Domain.MoneyTransactionTypeEnum.Expense).Sum(x => x.Amount);
        await base.OnInitializedAsync();
    } 
    int Income { get; set; }
    int Expenses { get; set; }

}
