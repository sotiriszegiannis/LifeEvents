@inject TagsRepository TagsRepository
<MudChipSet AllClosable="true" MultiSelection="true" Filter="true" OnClose="OnClosed">
    @foreach (var onScreenTag in OnScreenTags)
    {
        <MudChip Text="@onScreenTag.Text" @ref="onScreenTag.MudChip" OnClick="UpdateSelectedTags"></MudChip>
    }
    <MyAutocomplete Items="ItemsForAutoComplete" TextChanged="@AutoCompleteTextChanged" Label="Tag"></MyAutocomplete>    
</MudChipSet>
@code
{
    [Parameter]
    public List<ListItem<int, object>> SelectedTags { get; set; }
    [Parameter]
    public EventCallback<List<ListItem<int, object>>> SelectedTagsChanged { get; set; }
    List<Tag> TagsFromTheDB { get; set; } = new List<Tag>();
    List<string> ItemsForAutoComplete
    {
        get
        {
            return TagsFromTheDB
            .Where(p => !OnScreenTags.Any(x => x.Text == p.Name))
            .Select(p => p.Name)
            .ToList();
        }
    }
    //MudAutocomplete<string> MudAutocomplete { get; set; }
    List<OnScreenTag> OnScreenTags = new List<OnScreenTag>();
    void AutoCompleteTextChanged(string value)
    {
        AddTag(value);
    }
    public void OnClosed(MudChip chip)
    {
        OnScreenTags = OnScreenTags.Where(p => p.Text != chip.Text).ToList();
        UpdateSelectedTags();
    }
    protected async override Task OnInitializedAsync()
    {
        TagsFromTheDB = await TagsRepository.GetAll();
        await base.OnInitializedAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (OnScreenTags != null && OnScreenTags.Count > 0)
        {
            OnScreenTags.ForEach(p =>
            {
                if (p.MudChip != null)
                    if (p.New && !p.NewHasBeenMarkedAsSelected && !p.MudChip.IsSelected)
                    {
                        p.MudChip.IsSelected = true;
                        p.NewHasBeenMarkedAsSelected = true;
                    }
            });
            UpdateSelectedTags();
        }
        return base.OnAfterRenderAsync(firstRender);
    }
    void AddTag(string newTagValue)
    {
        OnScreenTags.Add(new OnScreenTag()
            {
                New = true,
                Text = newTagValue
            });
            StateHasChanged();
    }
    private void UpdateSelectedTags()
    {
        this.SelectedTags = OnScreenTags?
                            .Where(p => p.MudChip!=null && p.MudChip.IsSelected)
                            .Select(p => new ListItem<int, object>()
                                {
                                    Key = p.Id,
                                    Value = p.Text
                                })
                            .ToList()!;
        SelectedTagsChanged.InvokeAsync(SelectedTags);
        
    }
    class OnScreenTag
    {
        public string Text { get; set; }
        public int Id { get; set; }
        public bool NewHasBeenMarkedAsSelected { get; set; }
        public bool New { get; set; }
        public MudChip MudChip { get; set; }
    }
}