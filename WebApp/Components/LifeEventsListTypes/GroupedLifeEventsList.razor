@inherits LifeEventsListBase
<ul class="list-group">
    @foreach (var lifeEventGroup in LifeEventsToDisplay.GroupBy(p => p.Title).OrderByDescending(p => p.ToList(), new LifeEventGroupComparer()))
    {
        <li class="list-group-item">
            <div class="row">
                <div Class="col-12">
                    <div style="display: flex; justify-content: space-between; align-items: baseline;">
                        <div>
                            <span style="font-size:xx-large;display:inline">@lifeEventGroup.Max(p => p.Title)</span>
                            @if (@lifeEventGroup.Count() > 1)
                            {
                                <span style="display:inline;margin-left:0.2em;">@string.Format("(x{0})", lifeEventGroup.Count())</span>
                            }
                            <div style="display:inline-block">
                                @{
                                    var lifeEventGroupTags = lifeEventGroup.FirstOrDefault(p => p.Tags != null && p.Tags.Count > 0);
                                }
                                @if (lifeEventGroupTags != null)
                                {
                                    <MudChipSet T="object" ReadOnly="true">
                                        @foreach (var tag in lifeEventGroupTags!.Tags)
                                        {
                                            <StatisticsTag Tag="@tag" UtcDay="lifeEventGroup.FirstOrDefault().From.Value"></StatisticsTag>
                                        }
                                    </MudChipSet>
                                }
                            </div>
                        </div>
                        <div style="min-width:7.8em">
                            <MoneyTransactions Transactions="lifeEventGroup.Select(p=>p.MoneyTransaction).ToList()"></MoneyTransactions>
                            <div style="display:inline-block;float:right;font-size:xx-large;color: darkgoldenrod;">@GetDurationText(lifeEventGroup.Where(p => p.DurationInMinutes > 1).Sum(p => p.DurationInMinutes))</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    @foreach (var lifeEvent in lifeEventGroup.OrderByDescending(p => GetEventStartDate(p)))
                    {
                        <div class="row">
                            <div class="col-md-2 col-6">
                                <LifeEventTimeInfo Start="@GetEventStartDate(lifeEvent).ToIanaTimeZone(User.TimeZone)" Duration="@lifeEvent.DurationInMinutes"></LifeEventTimeInfo>
                            </div>
                            @if (lifeEventGroup.Count() > 1)
                            {
                                <div class="col-2">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="()=>DeleteLifeEvent(lifeEvent)"></MudIconButton>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
            <div>
                @if (lifeEventGroup.Count() == 1)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="()=>DeleteLifeEvent(lifeEventGroup.First())"></MudIconButton>
                }
            </div>
        </li>
    }
</ul>

@code {        
    class LifeEventGroupComparer : IComparer<List<LifeEventRDTO>>
    {
        public int Compare(List<LifeEventRDTO> LifeEventsA, List<LifeEventRDTO> LifeEventsB)
        {           
            if (LifeEventsA.Max(p => p.DateCreated!.Value > LifeEventsB.Max(p => p.DateCreated!.Value)))
                return 1;
            else
                return -1;
        }
    }
}
