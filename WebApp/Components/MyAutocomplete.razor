<div class="mud-input-control mud-input-required mud-input-error mud-input-input-control">
    <div class="mud-input-control-input-container">
        <div class="mud-input mud-input-text mud-input-underline">
            <input class="mud-input-slot mud-input-root mud-input-root-text" type="text" inputmode="text" maxlength="524288" @bind="@Text" @bind:event="oninput" @onkeydown="@Enter">
        </div>
        <label class="mud-input-label mud-input-label-animated mud-input-label-text mud-input-label-inputcontrol">Tags</label>
    </div>    
</div>
<MudMenu Dense="true" @ref="MudMenu">
    <ActivatorContent></ActivatorContent>
    <ChildContent>
        @foreach (var item in MenuItems)
        {
            <MudMenuItem OnClick="@(()=>SelectItem(item))">@item</MudMenuItem>
        }
    </ChildContent>
</MudMenu>
@code {
    [Parameter]
    public string Label { get; set; }
    [Parameter]
    public List<string> Items { get; set; }
    string _Text { get; set; }
    string Text
    {
        get
        {
            return _Text;
        }
        set
        {
            MenuItems = GetMenuItems(value);
            if (MenuItems.Count > 0)
                MudMenu.OpenMenu(null);
            else
                MudMenu.CloseMenu();
            _Text = value;
        }
    }
    [Parameter]
    public Action<string> TextChanged { get; set; }
    //string TextValue { get; set; }
    MudMenu MudMenu { get; set; }
    List<string> MenuItems = new List<string>();
    private List<string> GetMenuItems(string value)
    {
        if (string.IsNullOrEmpty(value))
            return new List<string>();
        else
            return Items.Where(p => p.Contains(value, StringComparison.InvariantCultureIgnoreCase)).Select(p => p).ToList();
    }
    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }
    void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            SelectItem(_Text);
        }
    }
    void SelectItem(string value)
    {
        if (TextChanged != null)
            TextChanged(value);
        _Text = "";
    }
}
