@inherits EditorBase
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject LifeEventsRepository LifeEventsRepository
@inject CrossComponentCommunication.CrossComponentCommunication<int> CrossComponentCommunication
<MudGrid>
    <MudItem xs="12" sm="12">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" ReadOnly="false">
                <MudTextField T="string" Label="Title" Required="true" RequiredError="Title is required!" @bind-Value="LifeEventDTO.Name" />
                <Tags @bind-SelectedTags="Tags"></Tags>
                <MudTextField T="string" Label="Description" @bind-Value="LifeEventDTO.Description" />
                <Duration DateRange="DateRange"></Duration>                                
                <MudTextField T="string" Label="Location" @bind-Value="LifeEventDTO.Location" />
            </MudForm>
        </MudPaper>        
    </MudItem>
</MudGrid>


@code {
    List<ListItem<int,object>> Tags { get; set; }
    EventDateRange DateRange { get; set; } = new EventDateRange();
    bool success;
    string[] errors = { };
    MudForm form;
    LifeEventRDTO LifeEventDTO = new Repository.LifeEventRDTO();       
    public override async Task<Subscriber> Save()
    {
        var result=new Subscriber();
        await form.Validate();        
        if (form.IsValid)
        {
            LifeEventDTO.From = DateRange?.From;
            LifeEventDTO.To = DateRange?.To;
            LifeEventDTO.Tags = Tags?.Select(p => new TagRDTO()
                {
                    Id = p.Key,
                    Name = p.Value
                })
            .ToList()!;
            var id = await LifeEventsRepository.Save(LifeEventDTO);
            if(id > 0)
            {
                result.EditorSaveResultType=EditorSaveResultTypeEnum.Saved;
                CrossComponentCommunication.Broadcast(BroadcastTypeEnum.NewLifeEvent,id);
            } 
            result.EditorSaveResultType=EditorSaveResultTypeEnum.SaveError;
        }
        else
            result.EditorSaveResultType=EditorSaveResultTypeEnum.ValidationErrors;
            return result;
    }
}