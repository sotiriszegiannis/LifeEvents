@inherits EditorBase
@inject UsersRepository UsersRepository
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject LifeEventsRepository LifeEventsRepository
@inject CrossComponentCommunication CrossComponentCommunication
<MudGrid>
    <MudItem xs="12" sm="12">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors" ReadOnly="false">
                <div class="row">
                    <div class="col-md-8 col-xs-12">
                        <MyAutocomplete Items="ExistingEventTitles" TextChanged="EventTitleChanged" Label="Title" Immediate="true"></MyAutocomplete>
                        <TagSelector @bind-Tags="Tags"></TagSelector>
                    </div>
                    <div class="col-md-4 col-xs-12">
                        <MoneyEditor @bind-MoneyTransaction="MoneyTransaction"></MoneyEditor>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12">
                        <Duration @bind-DateRange="DateRange"></Duration>
                        <MudExpansionPanels>
                            <MudExpansionPanel Text="more">
                                <MudTextField T="string" Label="Notes" @bind-Value="LifeEvent.Description" />
                                <MudTextField T="string" Label="Location" @bind-Value="LifeEvent.Location" />
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </div>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    MoneyTransactionDTO MoneyTransaction { get; set; } = new MoneyTransactionDTO();
    UserRDTO User { get; set; }
    List<ListItem<int, object>> Tags { get; set; }
    WebApp.DateRange DateRange { get; set; } = new WebApp.DateRange();
    bool success;
    string[] errors = { };
    MudForm form;
    LifeEventRDTO LifeEvent = new LifeEventRDTO();
    List<ListItem<string, object>> ExistingEventTitles { get; set; } = new List<ListItem<string, object>>();
    public override async Task<Subscriber> Save()
    {
        var result = new Subscriber();
        await form.Validate();
        if (form.IsValid)
        {
            if (DateRange == null)
                DateRange = new WebApp.DateRange();
            LifeEvent.From = !DateRange.From.HasValue ? DateTime.UtcNow.ToIanaTimeZone(User.TimeZone) : DateRange.From.Value;
            LifeEvent.To = !DateRange.To.HasValue ? LifeEvent.From.Value : DateRange.To.Value;
            LifeEvent.MoneyTransaction = new MoneyTransactionRDTO()
                {
                    Amount = MoneyTransaction.Amount,
                    Type = MoneyTransaction.Type
                };
            if (LifeEvent.To.Value < LifeEvent.From.Value)
            {
                result.EditorSaveResultType = EditorSaveResultTypeEnum.ValidationErrors;
            }
            else
            {
                LifeEvent.Tags = Tags?.Select(p => new TagRDTO()
                    {
                        Id = p.Key,
                        Name = p.Text
                    })
               .ToList()!;
                var id = await LifeEventsRepository.AddNew(LifeEvent);
                if (id > 0)
                {
                    result.EditorSaveResultType = EditorSaveResultTypeEnum.Saved;
                    CrossComponentCommunication.Broadcast(BroadcastTypeEnum.NewLifeEvent, new NewLifeEventBroadcastMessage(id));
                }
                else
                    result.EditorSaveResultType = EditorSaveResultTypeEnum.SaveError;
            }
        }
        else
            result.EditorSaveResultType = EditorSaveResultTypeEnum.ValidationErrors;
        return result;
    }

    protected async override Task OnInitializedAsync()
    {
        ExistingEventTitles = (await LifeEventsRepository.GetAllTitles())
                                .GroupBy(p => p.title)
                                .Select(p => p.OrderByDescending(x => x.id).FirstOrDefault())
                                .Select(p => new ListItem<string, object>(p.id.ToString(), p.title))
                                .ToList();
        User = await UsersRepository.Get();
        DateRange=new WebApp.DateRange()
            {
                From = DateTime.UtcNow.ToIanaTimeZone(User.TimeZone),
                To = DateTime.UtcNow.ToIanaTimeZone(User.TimeZone)
            };
        await base.OnInitializedAsync();
    }
    async void EventTitleChanged(ListItem<string, object> listItem)
    {
        if (listItem != null)
        {
            int id = 0;
            if (int.TryParse(listItem.Key, out id))
            {
                var lifeEvent = await LifeEventsRepository.Get(int.Parse(listItem.Key));
                if (lifeEvent != null)
                    ModelToScreen(lifeEvent, true);
                else
                    LifeEvent.Title = listItem!.Text;
            }
            else
                LifeEvent.Title = listItem!.Text;
        }
    }
    void ModelToScreen(LifeEventRDTO lifeEvent, bool useAsTemplate)
    {
        if (LifeEvent != null)
        {
            var minutes=(lifeEvent.To - lifeEvent.From).Value.TotalMinutes;
            DateRange.From = DateTime.UtcNow.ToIanaTimeZone(User.TimeZone);
            DateRange.To = DateRange.From.Value.AddMinutes(minutes);
            Tags = lifeEvent.Tags?.Select(p => new ListItem<int, object>(p.Id, p.Name)).ToList();
            LifeEvent.Title = lifeEvent.Title;
            //LifeEvent.Description = lifeEvent.Description;
            LifeEvent.Location = lifeEvent.Location;
            StateHasChanged();
        }
    }
}